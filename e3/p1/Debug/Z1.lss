
Z1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069b  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bd  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002df  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000331  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000113  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
#include <avr/interrupt.h>
#define F_CPU 1000000UL
#include <util/delay.h>

//obsluga przerwania INT0
ISR(INT0_vect) {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	83 ec       	ldi	r24, 0xC3	; 195
  7c:	99 e0       	ldi	r25, 0x09	; 9
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <__vector_1+0x12>
  82:	00 c0       	rjmp	.+0      	; 0x84 <__vector_1+0x18>
  84:	00 00       	nop
	_delay_ms(10);
	// jezeli po czasie 10ms przycisk jest niewcisniety przechodzimy do instrukcji
	if(PIND & (1<<PD2)) {
  86:	82 99       	sbic	0x10, 2	; 16
  88:	08 c0       	rjmp	.+16     	; 0x9a <__vector_1+0x2e>
		return;
	}
	TCNT1 = 58250; //poczatkowa wartosc timera
  8a:	8a e8       	ldi	r24, 0x8A	; 138
  8c:	93 ee       	ldi	r25, 0xE3	; 227
  8e:	9d bd       	out	0x2d, r25	; 45
  90:	8c bd       	out	0x2c, r24	; 44
	TCCR1B |= (1<<CS11) | (1<<CS10); //ustawienie prescalera czyli start timera
  92:	8e b5       	in	r24, 0x2e	; 46
  94:	83 60       	ori	r24, 0x03	; 3
  96:	8e bd       	out	0x2e, r24	; 46
	PORTA |= (1<<PA0); // w³¹czenie diody LED
  98:	d8 9a       	sbi	0x1b, 0	; 27
}
  9a:	9f 91       	pop	r25
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <__vector_9>:

//obsluga przerwania TIMER1
ISR(TIMER1_OVF_vect) {
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
	TCCR1B &= ~((1<<CS11) | (1<<CS10)); //wyzerowanie prescalera czyli stop timer
  b4:	8e b5       	in	r24, 0x2e	; 46
  b6:	8c 7f       	andi	r24, 0xFC	; 252
  b8:	8e bd       	out	0x2e, r24	; 46
	PORTA &= ~(1<<PA0); // wylaczenie diody led
  ba:	d8 98       	cbi	0x1b, 0	; 27
}
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <main>:


int main(void) {
	cli(); // wlazcneie przerwan
  c8:	f8 94       	cli
	
	DDRA |= (1<<PA0); // ustawienie portu PA.0 na wyjscie
  ca:	d0 9a       	sbi	0x1a, 0	; 26
	DDRD &= ~(1<<PD2); // ustawienie portu PD.2 na wejscie
  cc:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1<<PD2);
  ce:	92 9a       	sbi	0x12, 2	; 18
	DDRC = 0xFF; // ustawienie PORTC na wyjscie
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	84 bb       	out	0x14, r24	; 20
	
	MCUCR |= (1<<ISC01); //INT 0 zbocze spadajace
  d4:	85 b7       	in	r24, 0x35	; 53
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);	// 
  da:	8b b7       	in	r24, 0x3b	; 59
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	8b bf       	out	0x3b, r24	; 59
	
	TIMSK |= (1<<TOIE1); //TIMER1 - zezwolenie na przerwanie przy przepelnieniu
  e0:	89 b7       	in	r24, 0x39	; 57
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	89 bf       	out	0x39, r24	; 57
	
	sei(); // globalne zezwolenie na przerwania
  e6:	78 94       	sei
	
	while (1)
	{
		PORTC = 0xFF; //wszystkie diody zapalone
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	2f e9       	ldi	r18, 0x9F	; 159
  ee:	36 e8       	ldi	r19, 0x86	; 134
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x2a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x34>
  fc:	00 00       	nop
		_delay_ms(500);
		PORTC = 0x00; //wszystkie diody zgaszone
  fe:	15 ba       	out	0x15, r1	; 21
 100:	2f e9       	ldi	r18, 0x9F	; 159
 102:	36 e8       	ldi	r19, 0x86	; 134
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	21 50       	subi	r18, 0x01	; 1
 108:	30 40       	sbci	r19, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x3e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x48>
 110:	00 00       	nop
 112:	eb cf       	rjmp	.-42     	; 0xea <main+0x22>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
