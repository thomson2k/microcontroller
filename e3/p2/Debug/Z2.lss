
Z2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000579  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001de  00000000  00000000  00000bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d0  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
/////////////////////////
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void) {
	cli(); // wylaczamy przerwania
  6c:	f8 94       	cli

	DDRD |= (1<<PD5); // ustawiamy PD5(OC1A) na wyjscie
  6e:	8d 9a       	sbi	0x11, 5	; 17
	
	//timer zlicza do wartosci w ICR1 - konfigurucja aby uzyskac okres przebiegu na OC1A
	TCCR1A |= (1<<WGM11) | (1<<COM1A1); //zerowanie OC1A przy porownaniu
  70:	8f b5       	in	r24, 0x2f	; 47
  72:	82 68       	ori	r24, 0x82	; 130
  74:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<WGM13); //tryb fast pwm
  76:	8e b5       	in	r24, 0x2e	; 46
  78:	88 61       	ori	r24, 0x18	; 24
  7a:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<CS11) | (1<<CS10); // prescaler 64  wystartowanie timera
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	83 60       	ori	r24, 0x03	; 3
  80:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 8906; //ICR1 = ilosc cykli - 1 //35625
  82:	8a ec       	ldi	r24, 0xCA	; 202
  84:	92 e2       	ldi	r25, 0x22	; 34
  86:	97 bd       	out	0x27, r25	; 39
  88:	86 bd       	out	0x26, r24	; 38
	OCR1A = 2968; //czas trwania jedynki na OC1A
  8a:	88 e9       	ldi	r24, 0x98	; 152
  8c:	9b e0       	ldi	r25, 0x0B	; 11
  8e:	9b bd       	out	0x2b, r25	; 43
  90:	8a bd       	out	0x2a, r24	; 42
	
	sei(); //  globalne zezwolenie na przerwania
  92:	78 94       	sei
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0x28>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
